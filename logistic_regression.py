# -*- coding: utf-8 -*-
"""logistic regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GZG7nOnsu_BmNbwM_Pkdgmctg4h-FdLv
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

""" you want to predict a person's weight based on their height. Since weight is a continuous variable, you would use linear regression.

Now, imagine you want to predict whether a person will pass or fail an exam based on their study hours. Since the outcome is categorical (pass or fail), you would use logistic regression.



"""

dataset = pd .read_csv('/content/Social_Network_Ads (1).csv')
X = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, 4].values
dataset.info()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

from sklearn.preprocessing import  StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 3)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
print(y_pred)

print(y_test)

import matplotlib.pyplot as plt

# Scatter plot of Age vs EstimatedSalary colored by Purchased
plt.figure(figsize=(8, 6))
plt.scatter(X_train[:, 0], X_train[:, 1],c=y_train, cmap='viridis')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.title('Data Distribution (Training Set)')
plt.show()

"""purple means= no purchase made//
yellow means =purchase made
"""

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Precision
precision = precision_score(y_test, y_pred)
print("Precision:", precision)

# Recall
recall = recall_score(y_test, y_pred)
print("Recall:", recall)

# F1-Score
f1 = f1_score(y_test, y_pred)
print("F1-Score:", f1)

"""
True Negative (TN): The model correctly predicted "No Purchase" when the actual value was "No Purchase."
False Positive (FP): The model incorrectly predicted "Purchase" when the actual value was "No Purchase" (Type I error).
False Negative (FN): The model incorrectly predicted "No Purchase" when the actual value was "Purchase" (Type II error).
True Positive (TP): The model correctly predicted "Purchase" when the actual value was "Purchase."
Your code:[[65  3]
 [ 8 24]]
 here 65 means true positives
 and 24 means true negatives
 and 3 means false positives"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

# ... (previous code) ...

# Function to visualize the decision boundary
def visualize_decision_boundary(X, y, classifier):
    X_set, y_set = X, y
    X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                         np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
    plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
                 alpha = 0.75, cmap = ListedColormap(('red', 'green')))
    plt.xlim(X1.min(), X1.max())
    plt.ylim(X2.min(), X2.max())
    for i, j in enumerate(np.unique(y_set)):
        plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                    c = ListedColormap(('red', 'green'))(i), label = j)
    plt.title('Logistic Regression (Training set)')
    plt.xlabel('Age')
    plt.ylabel('Estimated Salary')
    plt.legend()
    plt.show()

# Visualize the decision boundary for the training set
visualize_decision_boundary(X_train, y_train, classifier)

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'y_test' and 'y_pred' are defined
cm = confusion_matrix(y_test, y_pred)

# Create a heatmap of the confusion matrix
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()